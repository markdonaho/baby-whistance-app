rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // Allow create if the user is authenticated and the userId matches their auth UID
      // This allows a user to create their own document upon signup.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow read if the user is authenticated and the userId matches their auth UID (they can read their own doc)
      // OR if the requesting user has an 'admin' role (for future admin functionality)
      // For now, without a reliable way to check admin role in rules from client claims,
      // we might keep it simpler or plan for custom claims.
      // Let's start with users reading their own data.
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow update if the user is authenticated, the userId matches their auth UID,
      // and they are only trying to update allowed fields (e.g., displayName, updatedAt).
      // They should not be able to change their role, email, or uid via direct update here.
      allow update: if request.auth != null && request.auth.uid == userId &&
                      request.resource.data.keys().hasOnly(['displayName', 'updatedAt', 'email', 'createdAt', 'role']) && // List all fields
                      request.resource.data.email == resource.data.email && // Cannot change email
                      request.resource.data.uid == resource.data.uid && // Cannot change uid (though it is doc id)
                      request.resource.data.role == resource.data.role && // Cannot change role (for now)
                      request.resource.data.createdAt == resource.data.createdAt; // Cannot change createdAt
                      // Add other immutable fields here

      // Disallow delete for now to prevent users from deleting their own accounts directly through Firestore.
      // Account deletion should be handled via a Firebase Function or specific Admin SDK process.
      allow delete: if false;
    }

    // Example for other collections (e.g., whistance_data) - to be defined later
    // match /whistance_data/{docId} {
    //   // Allow read only for authenticated users with a specific role (e.g., 'whistance' or 'admin')
    //   allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['whistance', 'admin'];
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }

  }
} 