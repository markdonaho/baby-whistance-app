rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // Allow create if the user is authenticated and the userId matches their auth UID
      // This allows a user to create their own document upon signup.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow read if the user is authenticated and the userId matches their auth UID (they can read their own doc)
      // OR if the requesting user has an 'admin' role.
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Allow list (for admins to see all users) if the requesting user has an 'admin' role.
      // Note: Firestore rules for `list` apply to collection queries.
      allow list: if request.auth != null && 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Allow update:
      // 1. If the user is updating their own document and NOT changing their role or other protected fields.
      // 2. If the requester is an admin, they can ONLY update the 'role' field of ANY user.
      allow update: if request.auth != null && (
                      ( // Case 1: User updating their own allowed fields
                        request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['displayName', 'updatedAt', 'email', 'createdAt', 'role']) &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.uid == resource.data.uid && // Though uid is doc id, good to be explicit
                        request.resource.data.role == resource.data.role && // User cannot change their own role
                        request.resource.data.createdAt == resource.data.createdAt
                      ) || 
                      ( // Case 2: Admin updating ONLY the role field of another user
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                        request.resource.data.keys().hasOnly(['role', 'updatedAt']) && // Admin can only change role (and server updates updatedAt)
                        request.resource.data.size() == 2 && // Ensure only role and updatedAt are being set by admin
                        (!request.resource.data.keys().hasAny(['email', 'displayName', 'createdAt', 'uid'])) // Explicitly forbid changing other fields
                      )
                    );

      // Disallow delete for now to prevent users from deleting their own accounts directly through Firestore.
      // Account deletion should be handled via a Firebase Function or specific Admin SDK process.
      allow delete: if false;

      // Guesses subcollection rules are NO LONGER HERE as guesses are top-level now
      // match /guesses/{guessId} { ... } 
    }

    // New Top-Level Guesses collection
    match /guesses/{guessId} {
      // Allow any authenticated user to read any guess (for AllGuessesScreen)
      allow read: if request.auth != null;

      // Allow create if user is authenticated and the guess's userId matches their auth.uid
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow update if user is authenticated, the guess's stored userId matches their auth.uid,
      // AND they are not trying to change the userId field.
      allow update: if request.auth != null && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == resource.data.userId;
                       // Add other field immutability checks here if needed, e.g., for submittedAt

      // Allow delete if user is authenticated and the guess's stored userId matches their auth.uid
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // App Status collection (for guessing_status, etc.)
    match /app_status/{statusId} {
      // Allow admin to read and write the app_config document.
      // statusId will typically be 'app_config'.
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                     statusId == 'app_config' &&
                     // Admin can update guessing_status and actual_baby_details
                     (request.resource.data.keys().hasAll(['guessing_status', 'updatedAt']) || 
                      request.resource.data.keys().hasAll(['actual_baby_details', 'updatedAt']) ||
                      request.resource.data.keys().hasAll(['guessing_status', 'actual_baby_details', 'updatedAt']) ||
                      // For initial creation by the service if document doesn't exist
                      request.resource.data.keys().hasAll(['guessing_status', 'actual_baby_details', 'createdAt'])); 
    }

    // Example for other collections (e.g., whistance_data) - to be defined later
    // match /whistance_data/{docId} {
    //   // Allow read only for authenticated users with a specific role (e.g., 'whistance' or 'admin')
    //   allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['whistance', 'admin'];
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }

    // Feedback collection
    match /feedback/{feedbackId} {
      // Allow create if the user is authenticated and the feedback's userId matches their auth UID.
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid &&
                       // Ensure required fields are present
                       request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'timestamp', 'feedbackText']);

      // Allow read/list if the user is authenticated AND has 'admin' or 'Whistance' role.
      allow read, list: if request.auth != null && 
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Whistance'];

      // Allow update only by admins (e.g., to add a status or response to feedback - not implemented yet)
      allow update: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Allow delete only by admins
      allow delete: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

  }
} 