import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'app_status_service.g.dart';

// Enum for guessing status
enum GuessingStatus {
  open,
  closed,
  revealed,
}

// Model for application status
class AppStatus {
  final String id; // Typically a fixed ID like 'current_status'
  final GuessingStatus guessingStatus;
  final Map<String, dynamic>? actualBabyDetails; // For actual birth details

  AppStatus({
    required this.id,
    required this.guessingStatus,
    this.actualBabyDetails,
  });

  factory AppStatus.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data();
    if (data == null) {
      return AppStatus(id: snapshot.id, guessingStatus: GuessingStatus.closed, actualBabyDetails: null);
    }
    
    GuessingStatus status;
    final rawStatus = data['guessing_status'] as String?;
    
    if (rawStatus == null) {
      status = GuessingStatus.closed;
    } else {
      try {
        status = GuessingStatus.values.firstWhere(
          (e) => e.toString() == 'GuessingStatus.' + rawStatus,
        );
      } catch (e) {
        status = GuessingStatus.closed;
      }
    }
    
    return AppStatus(
      id: snapshot.id,
      guessingStatus: status,
      actualBabyDetails: data['actual_baby_details'] as Map<String, dynamic>?,
    );
  }

  factory AppStatus.defaults() {
    return AppStatus(id: 'app_config', guessingStatus: GuessingStatus.closed, actualBabyDetails: null);
  }
}

// Firestore service for app status
@riverpod
FirebaseFirestore appStatusFirestore(AppStatusFirestoreRef ref) {
  return FirebaseFirestore.instance;
}

@riverpod
class AppStatusService extends _$AppStatusService {
  FirebaseFirestore get _firestore => ref.read(appStatusFirestoreProvider);
  // Using a fixed document ID for app status
  static const String _appStatusDocId = 'app_config'; // Changed from 'current_status' to 'app_config' to match README

  @override
  Stream<AppStatus> build() {
    final docRef = _firestore.collection('app_status').doc(_appStatusDocId);
    return docRef.snapshots().map((snapshot) {
      if (snapshot.exists) {
        return AppStatus.fromFirestore(snapshot);
      } else {
        // If the document doesn't exist, create it with default values.
        final defaultStatus = AppStatus.defaults();
        _firestore.collection('app_status').doc(_appStatusDocId).set({
          'guessing_status': defaultStatus.guessingStatus.toString().split('.').last,
          'actual_baby_details': defaultStatus.actualBabyDetails,
          'createdAt': FieldValue.serverTimestamp(), 
        });
        return defaultStatus; 
      }
    }).handleError((error, stackTrace) {
      return AppStatus.defaults();
    });
  }

  // Method to update guessing status (example, typically for admin)
  Future<void> setGuessingStatus(GuessingStatus status) async {
    try {
      await _firestore.collection('app_status').doc(_appStatusDocId).update({
        'guessing_status': status.toString().split('.').last,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      rethrow;
    }
  }

  Future<void> setActualBabyDetails(Map<String, dynamic> details) async {
    try {
      await _firestore.collection('app_status').doc(_appStatusDocId).update({
        'actual_baby_details': details,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      rethrow;
    }
  }
}

// Provider for the AppStatus stream
// This will be generated by Riverpod generator as appStatusServiceProvider
// final appStatusProvider = StreamProvider<AppStatus>((ref) {
//   return ref.watch(appStatusServiceProvider.notifier).stream;
// });

// More direct provider for the AppStatus value from the stream
// final currentAppStatusProvider = StreamProvider.autoDispose<AppStatus>((ref) { // Made it autoDispose for consistency
//   // Access the stream from the NotifierProvider correctly
//   return ref.watch(appStatusServiceProvider.stream);
// });

// Alias appStatusServiceProvider as currentAppStatusProvider if they are intended to be the same.
// This provides AsyncValue<AppStatus> when watched.
final currentAppStatusProvider = appStatusServiceProvider; 